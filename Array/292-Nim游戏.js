"use strict"

/**
 * 你和你的朋友，两个人一起玩 Nim游戏：桌子上有一堆石头，每次你们轮流拿掉 1 - 3 块石头。 拿掉最后一块石头的人就是获胜者。你作为先手
 * 你们是聪明人，每一步都是最优解。 编写一个函数，来判断你是否可以在给定石头数量的情况下赢得游戏
 * 示例:
 *  输入: 4
 *  输出: false
 *  解释: 如果堆中有 4 块石头，那么你永远不会赢得比赛, 因为无论你拿走 1 块、2 块 还是 3 块石头，最后一块石头总是会被你的朋友拿走
 * 
 *  注：游戏规则
 *  每人每步最多拿三课石子，且不能不拿 
 *  谁拿到最后一课石子为胜利
 *  当石子的总线为4条的时候，不管先手拿几课，后手都有应对的方法，先手必输
 *  所以你会发现8课也是必输，8课石子可以分成两个部分，每个部分四课石子。自然先手还是必输。4这个数字还真是不太吉利
 *  当线的总数为5条的时候，先手先划掉一条线，后手就等于是在4条线的情况下先手，自然后手输
 *  而6条 7条 先手都可以划掉2条线和3条线来让后手落入“4”的陷阱
 *  所以我们可以看出，我们只要远离”4“就行了。当线的总数不是4的倍数的时候，先手必赢
 * 
 */

/**
 * @param {number} n
 * @return {boolean}
 * 参数 n 代表的是线条的总数。 通过线条总是是否能被4整除来判断这场比赛中作为先手的你必赢还是必输
 * 当 n%4 的结果为0时意味着n能被4整除，返回0，转换为布尔值为false
 * 当n%4不等于0时意味这n不能被4整除，返回非0，转换为布尔值为true
 */
let n = 9
var canWinNim = function (n) {
    return n % 4 != 0
};

console.time()

console.log(canWinNim(n))

console.timeEnd()