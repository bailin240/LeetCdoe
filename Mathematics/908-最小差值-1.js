"use strict"

/**
 * 给定一个整数数组 A，对于每个整数 A[i]，我们可以选择任意 x 满足 -K <= x <= K，并将 x 加到 A[i] 上
 * 比如A[1, 3, 6],K = 3，那么x可以取-3到3，可以让A[0] + 2，A[1] + 0，A[2] + (-3), 那么差值就是最大-最小就等于0了
 * 
 * 那么数组A就变成了[3, 3, 3]这时候，A数组的最大值是3，最小值也是3
 * 在此过程之后，我们得到一些数组 B
 * 返回 B 的最大值和 B 的最小值之间可能存在的最小差值
 * 
 * 示例 1：
 *  输入：A = [1], K = 0
 *  输出：0
 *  解释：B = [1]
 * 
 * 示例 2：
 *  输入：A = [0,10], K = 2
 *  输出：6
 *  解释：x 值为[-2.-1,0,1,2]  
 *       A[0] + 2   A[1] + -2   B = [2,8]
 *       最小差为 6
 * 
 * 示例 3：
 *  输入：A = [1,3,6], K = 3
 *  输出：0
 *  
 *  解释： 
 *       x值为[-3,-2,-1,0,1,2,3] 
 *       A[0] + 2   A[1] + 0    A[2] + -3  :  B = [3,3,3]
 *       A[0] + 3   A[1] + 1    A[2] + -2  :  B = [4,4,4]
 *       最少差为 0 
 * 提示：
 *  1 <= A.length <= 10000
 *  0 <= A[i] <= 10000
 *  0 <= K <= 10000
 */

 /**
 * @param {number[]} A
 * @param {number} K
 * @return {number}
 */
let A = [9,9,2,8,7], K = 4
var smallestRangeI = function (A, K) {
    A.sort((a, b) => a - b)
    return K * 2 >= A[A.length - 1] - A[0] ? 0 : A[A.length - 1] - A[0] - 2 * K;
};


console.time()

console.log(smallestRangeI(A, K))

console.timeEnd()